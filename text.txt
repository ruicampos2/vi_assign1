<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>World Maps - Data Visualization</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v1.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    .country {
      stroke: #333;
      stroke-width: 0.5px;
    }

    .active {
      fill: #ffcc00;
    }

    .popup {
      position: absolute;
      background-color: rgba(255, 255, 255, 0.9);
      border-radius: 8px;
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
      padding: 10px;
      font-size: 14px;
      display: none;
      z-index: 10;
    }

    .popup h3 {
      margin: 0;
      font-size: 16px;
    }

    .popup p {
      margin: 5px 0;
    }

    .navbar {
      display: flex;
      justify-content: center;
      background-color: #333;
      padding: 10px;
    }

    .navbar button {
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      margin: 0 5px;
    }

    .navbar button:hover {
      background-color: #45a049;
    }

    .maps-container {
      display: flex;
      width: 100vw;
      height: 90vh;
    }

    .map {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    svg {
      width: 100%;
      height: 100%;
    }
  </style>
</head>

<body>

  <div class="navbar">
    <button id="globalMapBtn" onclick="window.location.href='index.html'">Mapa Global</button>
    <button id="compareBtn" onclick="window.location.href='compare.html'">Comparar</button>
  </div>

  <div class="maps-container">
    <div id="map1" class="map"></div>
    <div id="map2" class="map"></div>
  </div>

  <div id="popup" class="popup"></div>

  <script>
    var width = window.innerWidth / 2, height = window.innerHeight * 0.9;

    // Ajuste os valores de scale e translate para o zoom inicial
    var projection = d3.geoMercator()
      .scale(146) // Reduza o valor de scale para aumentar o "zoom out"
      .translate([width / 2, height / 1.7]); // Ajuste a posição horizontal e vertical do mapa

    var path = d3.geoPath().projection(projection);


    var colorScale = d3.scaleQuantize().domain([0, 50]).range(d3.schemeBlues[9]);

    Promise.all([
      d3.json("https://d3js.org/world-110m.v1.json"),
      d3.csv("dataset/dataset.csv")
    ]).then(function ([worldData, csvData]) {
      var countries = topojson.feature(worldData, worldData.objects.countries).features;
      var dataByCountry = {};
      csvData.forEach(function (d) {
        if (d['ISO Code']) {
          if (!dataByCountry[d['ISO Code']]) {
            dataByCountry[d['ISO Code']] = { children: {}, adult: {} };
          }
          dataByCountry[d['ISO Code']][d.Group.toLowerCase()][d.Gender.toLowerCase()] = d;
        }
      });

      function drawMap(containerId, dataType, title) {
        var svg = d3.select(containerId).append("svg").attr("width", width).attr("height", height);

        // Adiciona o título ao gráfico
        svg.append("text")
          .attr("x", width / 2) // Centraliza horizontalmente
          .attr("y", 30) // Posiciona o título 30 pixels abaixo do topo
          .attr("text-anchor", "middle") // Centraliza o texto
          .attr("font-size", "20px") // Tamanho da fonte
          .attr("fill", "#333") // Cor do texto
          .text(title); // Define o texto do título

        svg.selectAll("path")
          .data(countries)
          .enter().append("path")
          .attr("class", "country")
          .attr("d", path)
          .attr("fill", function (d) {
            var countryCode = d.id;
            var countryData = dataByCountry[countryCode];

            // Define o preenchimento com base no tipo de dado selecionado (prática de esportes ou obesidade)
            if (countryData) {
              if (dataType === 'sports') {
                return colorScale(countryData.children.male['Football (%)'] || 0);
              } else if (dataType === 'obesity') {
                return colorScale(countryData.adult.male['Obesity Rate (%)'] || 0);
              }
            }
            return "#ccc"; // Cor padrão para países sem dados
          })
          .on("click", function (event, d) {
            // ... (código do popup)
          })
          .on("mouseleave", function () {
            d3.select("#popup").style("display", "none");
          });

        // Configuração do zoom
        var zoom = d3.zoom()
          .scaleExtent([1, 8])
          .on("zoom", function (event) {
            svg.selectAll("path").attr("transform", event.transform);
          });

        // svg.call(zoom);
      }

      // Chamadas da função para exibir os mapas
      drawMap("#map1", "sports", "Taxa da Prática de Desport Mundial"); // Primeiro mapa
      drawMap("#map2", "obesity", "Taxa de Obesidade Mundial"); // Segundo mapa



    }).catch(function (error) {
      console.error("Erro ao carregar os dados: ", error);
    });
  </script>
</body>

</html>